// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// add_tool_immune
int add_tool_immune(SEXP model, std::vector< bool >& baselineseq, double preval);
RcppExport SEXP _epiworld_add_tool_immune(SEXP modelSEXP, SEXP baselineseqSEXP, SEXP prevalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::vector< bool >& >::type baselineseq(baselineseqSEXP);
    Rcpp::traits::input_parameter< double >::type preval(prevalSEXP);
    rcpp_result_gen = Rcpp::wrap(add_tool_immune(model, baselineseq, preval));
    return rcpp_result_gen;
END_RCPP
}
// add_tool_mask
int add_tool_mask(SEXP model, std::vector< bool >& baselineseq, double preval);
RcppExport SEXP _epiworld_add_tool_mask(SEXP modelSEXP, SEXP baselineseqSEXP, SEXP prevalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::vector< bool >& >::type baselineseq(baselineseqSEXP);
    Rcpp::traits::input_parameter< double >::type preval(prevalSEXP);
    rcpp_result_gen = Rcpp::wrap(add_tool_mask(model, baselineseq, preval));
    return rcpp_result_gen;
END_RCPP
}
// add_tool_vaccine
int add_tool_vaccine(SEXP model, std::vector< bool >& baselineseq, double preval);
RcppExport SEXP _epiworld_add_tool_vaccine(SEXP modelSEXP, SEXP baselineseqSEXP, SEXP prevalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::vector< bool >& >::type baselineseq(baselineseqSEXP);
    Rcpp::traits::input_parameter< double >::type preval(prevalSEXP);
    rcpp_result_gen = Rcpp::wrap(add_tool_vaccine(model, baselineseq, preval));
    return rcpp_result_gen;
END_RCPP
}
// add_virus_covid19
int add_virus_covid19(SEXP model, std::vector< bool > baselineseq, double preval);
RcppExport SEXP _epiworld_add_virus_covid19(SEXP modelSEXP, SEXP baselineseqSEXP, SEXP prevalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    Rcpp::traits::input_parameter< std::vector< bool > >::type baselineseq(baselineseqSEXP);
    Rcpp::traits::input_parameter< double >::type preval(prevalSEXP);
    rcpp_result_gen = Rcpp::wrap(add_virus_covid19(model, baselineseq, preval));
    return rcpp_result_gen;
END_RCPP
}
// new_model
SEXP new_model();
RcppExport SEXP _epiworld_new_model() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(new_model());
    return rcpp_result_gen;
END_RCPP
}
// run_model
int run_model(SEXP model, int nsteps, int seed);
RcppExport SEXP _epiworld_run_model(SEXP modelSEXP, SEXP nstepsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(run_model(model, nsteps, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_epiworld_add_tool_immune", (DL_FUNC) &_epiworld_add_tool_immune, 3},
    {"_epiworld_add_tool_mask", (DL_FUNC) &_epiworld_add_tool_mask, 3},
    {"_epiworld_add_tool_vaccine", (DL_FUNC) &_epiworld_add_tool_vaccine, 3},
    {"_epiworld_add_virus_covid19", (DL_FUNC) &_epiworld_add_virus_covid19, 3},
    {"_epiworld_new_model", (DL_FUNC) &_epiworld_new_model, 0},
    {"_epiworld_run_model", (DL_FUNC) &_epiworld_run_model, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_epiworld(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
